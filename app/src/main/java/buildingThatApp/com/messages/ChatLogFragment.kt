package buildingThatApp.com.messages

import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import android.view.WindowManager
import androidx.annotation.RequiresApi
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import buildingThatApp.com.R
import buildingThatApp.com.databinding.ChatLogFragmentBinding
import buildingThatApp.com.models.ChatMessage
import com.google.firebase.database.FirebaseDatabase
import com.xwray.groupie.GroupAdapter
import com.xwray.groupie.GroupieViewHolder

class ChatLogFragment : Fragment(R.layout.chat_log_fragment) {

    private lateinit var binding: ChatLogFragmentBinding
    private val args: ChatLogFragmentArgs by navArgs()

    companion object {
        private val CHAT_FRAGMENT_LOGS = "chatMyLogs"
    }

    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding = ChatLogFragmentBinding.bind(view)

        setupDummyData()

        // here we'll be setting up send message button
        binding.sendButtonChatLog.setOnClickListener {
            sendMessage()
        }

        val layoutManager = LinearLayoutManager(requireContext())
        layoutManager.stackFromEnd = true
        binding.recyclerviewChatLog.layoutManager = layoutManager

        binding.recyclerviewChatLog.addOnLayoutChangeListener { view, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom  ->
            if (bottom < oldBottom) {
                binding.recyclerviewChatLog.postDelayed(Runnable{
                    binding.recyclerviewChatLog.scrollToPosition(
                        binding.recyclerviewChatLog.adapter!!.itemCount -1
                    )
                }, 100)
            }
        }
    }

    private fun setupDummyData() {
        val adapter = GroupAdapter<GroupieViewHolder>()

        // adding our chat left_from/ to adapter
        adapter.add(ChatFromItem("FROM MESSSSSSSSAGE"))
        adapter.add(ChatToItem("TO MESSAGE \n TOMESSAGE"))
        adapter.add(ChatFromItem("FROM MESSSSSSSSAGE"))
        adapter.add(ChatToItem("TO MESSAGE \n TOMESSAGE"))
        adapter.add(ChatFromItem("FROM MESSSSSSSSAGE"))
        adapter.add(ChatToItem("TO MESSAGE \n TOMESSAGE"))
        adapter.add(ChatFromItem("FROM MESSSSSSSSAGE"))
        adapter.add(ChatToItem("TO MESSAGE \n TOMESSAGE"))
        adapter.add(ChatFromItem("FROM MESSSSSSSSAGE"))
        adapter.add(ChatToItem("TO MESSAGE \n TOMESSAGE"))
        adapter.add(ChatFromItem("FROM MESSSSSSSSAGE"))
        adapter.add(ChatToItem("TO MESSAGE \n TOMESSAGE"))

        // adding adapter for the chat recyclerView
        binding.recyclerviewChatLog.adapter = adapter
    }

    private fun sendMessage() {
        Log.d(CHAT_FRAGMENT_LOGS, "Attempt to send message.....")

        // getting text from the editText, and then erasing it once it has been successfully delivered
        val text = binding.edittextChatLog.text.toString()


        // setting up Firebase messaging. path: - is the name of the node in firebase where our "message" object will be stored.
        // .push() - will generate an automatic node to start saving data in
        val reference = FirebaseDatabase.getInstance().getReference("/messages").push()

        val chatMessage = ChatMessage(text)

        // we will send here chatMessage objects
        reference.setValue(chatMessage)
            .addOnSuccessListener {
                binding.edittextChatLog.setText("")
                // logging successful attempt and id. id new id generated by push call
                Log.d(CHAT_FRAGMENT_LOGS, "Saved our chat message.....${reference.key}")
            }
    }
}


/*
        val layoutManager = LinearLayoutManager(requireContext())
        layoutManager.stackFromEnd = true
        binding.recyclerviewChatLog.layoutManager = layoutManager

        binding.recyclerviewChatLog.addOnLayoutChangeListener { view, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom  ->
            if (bottom < oldBottom) {
                binding.recyclerviewChatLog.postDelayed(Runnable{
                    binding.recyclerviewChatLog.scrollToPosition(
                        binding.recyclerviewChatLog.adapter!!.itemCount -1
                    )
                }, 100)
            }
        }

        //activity?.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)
 */


